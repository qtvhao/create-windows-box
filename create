#!/bin/bash

# remove vm windows-ssh-rdp-ready
grep avx2 /proc/cpuinfo || {
    echo "CPU does not support AVX"
    exit 0
}
chmod +x pic || curl https://raw.githubusercontent.com/qtvhao/picloud/main/pic -o pic && chmod +x pic
set -xeo pipefail
mkdir -p /root/Provision/create-windows-box/
cd /root/Provision/create-windows-box/

mkdir -p ./necessary-files/
Node_msi="./necessary-files/node-v20.11.0-x64.msi"
stat "$Node_msi" || wget -O "$Node_msi" "https://nodejs.org/dist/latest-iron/node-v20.11.0-x64.msi"

ChromeSetup_exe="./necessary-files/ChromeSetup.exe"
stat "$ChromeSetup_exe" || wget -O "$ChromeSetup_exe" "https://dl.google.com/chrome/install/stable/chrome_installer.exe"

Git_exe="./necessary-files/Git-2.43.0-64-bit.exe"
stat "$Git_exe" || wget -O "$Git_exe" "https://github.com/git-for-windows/git/releases/download/v2.43.0.windows.1/Git-2.43.0-64-bit.exe"


WINDOWS_ISO_PATH="/root/windows.iso"
get_ip_addresses_on_lan() {
    EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`
    for i in {1..10}; do
        EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`" $EXISTS_IPs"
    done
    EXISTS_IPs=`echo $EXISTS_IPs | tr ' ' '\n' | sort -u | tr '\n' ' '`

    echo "$EXISTS_IPs"
}
get_vm_ip() {
    VM=$1
        
    while true; do
        sleep 6
        VBoxManage controlvm "$VM" acpipowerbutton >&2 || break
        VBoxManage controlvm "$VM" poweroff >&2 || break
    done

    EXISTS_IP=`get_ip_addresses_on_lan`

    VBoxManage startvm "$VM" --type headless >&2 || exit 0

    NEW_IP_ADDRESS=""
    while [ -z "$NEW_IP_ADDRESS" ]; do
        echo "You must install the SSH server on Windows 10" >&2
        sleep 5
        EXISTS_IP_2=`get_ip_addresses_on_lan`
        for IP_ADDRESS in $EXISTS_IP_2; do
            if [[ $EXISTS_IP != *"$IP_ADDRESS"* ]]; then
                NEW_IP_ADDRESS=$IP_ADDRESS
            fi
        done
    done

    if [ -z "$NEW_IP_ADDRESS" ]; then
        echo "NEW_IP_ADDRESS is not set" >&2
        sleep 8
        echo `get_vm_ip "$VM"`
    else
        touch /root/.ssh/known_hosts
        echo "NEW_IP_ADDRESS is set" >&2
        ssh-keygen -R "$NEW_IP_ADDRESS" >&2 || true
        ssh-keyscan "$NEW_IP_ADDRESS" >> /root/.ssh/known_hosts

        echo "$NEW_IP_ADDRESS"
    fi

}
install_ssh_server() {
    VBoxManage clonevm empty-box-marked-as-done --name windows-installed --register
    echo "Installing SSH server"
    VBoxManage startvm "windows-installed" --type headless

    TARGET_IP=`get_vm_ip "windows-installed" 2>/dev/null`
    echo "TARGET_IP: $TARGET_IP"
    while true; do
        touch /root/.ssh/known_hosts
        ssh-keygen -R $TARGET_IP || true
        ssh-keyscan $TARGET_IP >> /root/.ssh/known_hosts

        ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-Item -Path C:/ProgramData/ssh -ItemType Directory -Force" || true
        scp -i /root/id_rsa /root/id_rsa.pub $TARGET_IP:C:/ProgramData/ssh/administrators_authorized_keys && break || true
        echo "Waiting for SSH server on $NEW_IP_ADDRESS"
        sleep 5
    done

    ssh -i /root/id_rsa $TARGET_IP "icacls C:/ProgramData/ssh/administrators_authorized_keys /inheritance:r && icacls C:/ProgramData/ssh/administrators_authorized_keys /grant SYSTEM:(F) && icacls C:/ProgramData/ssh/administrators_authorized_keys /grant BUILTIN\Administrators:(F) && icacls C:/ProgramData/ssh/administrators_authorized_keys && net stop sshd && net start sshd"
}
install_windows() {
    echo "Creating empty box for Windows"
    VBoxManage createvm --name "empty-box" --ostype "Windows10_64" --register
    VBoxManage modifyvm "empty-box" --memory 8192 --cpus 2
    VBoxManage modifyvm "empty-box" --nic1 none
    # 
    VBoxManage storagectl "empty-box" --name "IDE Controller" --add ide
    VBoxManage storageattach "empty-box" --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium $WINDOWS_ISO_PATH

    VBoxManage storagectl "empty-box" --name "SATA Controller" --remove || true
    VBoxManage closemedium disk "/root/empty-box.vdi" --delete || true
    VBoxManage createhd --filename "/root/empty-box.vdi" --size 50000 --format VDI # 50GB
    VBoxManage storagectl "empty-box" --name "SATA Controller" --add sata --controller IntelAHCI
    VBoxManage storageattach "empty-box" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium "/root/empty-box.vdi"

    VBoxManage modifyvm "empty-box" --boot1 dvd --boot2 disk --boot3 none --boot4 none

    VBoxManage startvm "empty-box" --type headless

    NETWORK_INTERFACE=$(ip route | grep default | awk '{print $5}')
    while true; do
        hostnameI=`hostname -I | tr ' ' '\n' | grep "192" | head -n 1`
        HOST_PASSWORD=`cat /root/rdp_password.txt`
        echo "Connect to $hostnameI:3389 with username: root, password: $HOST_PASSWORD and finish the Windows 10 installation. You must turn off the Windows 10 VM after the installation is complete"
        sleep 8
        VBoxManage modifyvm "empty-box" --nic1 bridged --bridgeadapter1 "$NETWORK_INTERFACE" && break || true
    done
    echo "empty-box is powered off"
}
install_rdp_server() {
    TARGET_IP=`get_vm_ip "windows-ssh-ready" 2>/dev/null`
    if [ -z "$TARGET_IP" ]; then
        echo "TARGET_IP is not set"
        exit 1
    fi
    ssh-keygen -R $TARGET_IP || true
    ssh-keyscan $TARGET_IP >> /root/.ssh/known_hosts
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name 'fDenyTSConnections' -Value 0"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name 'UserAuthentication' -Value 1"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name 'SecurityLayer' -Value 0"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name 'PortNumber' -Value 3389"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name 'fSingleSessionPerUser' -Value 0"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name 'MaxConnectionTime' -Value 999999"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name 'MaxDisconnectionTime' -Value 999999"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name 'MaxIdleTime' -Value 999999"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop ICMP4' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol ICMPv4"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop ICMP6' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol ICMPv6"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop (TCP-In)' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop - User Mode (TCP-In)' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop - User Mode (UDP-In)' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol UDP -LocalPort 3389"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop - Shadow (TCP-In)' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389"
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-NetFirewallRule -DisplayName 'Remote Desktop - User Mode (TCP-In)' -Profile @('Domain', 'Private', 'Public') -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3389"

    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\TCPIP\Parameters' -Name 'LSOv2IPv4' -Value 0"
    while ! timeout 2 nc -z $TARGET_IP 3389; do
        echo "Waiting for RDP server on $TARGET_IP"
        sleep 5
    done
    Adapter_Name="Ethernet"

    timeout 5 ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-NetAdapterAdvancedProperty $Adapter_Name -DisplayName 'Large Send Offload (IPv4)' -DisplayValue Disabled" || \
    timeout 5 ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-NetAdapterAdvancedProperty $Adapter_Name -DisplayName 'Large Send Offload (IPv4)' -DisplayValue Disabled" || \
    timeout 5 ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-NetAdapterAdvancedProperty $Adapter_Name -DisplayName 'Large Send Offload (IPv4)' -DisplayValue Disabled" || \
    timeout 5 ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-NetAdapterAdvancedProperty $Adapter_Name -DisplayName 'Large Send Offload (IPv4)' -DisplayValue Disabled" || true

    # stop all updates on Windows 10
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name 'NoAutoUpdate' -Value 1" # disable auto update
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name 'AUOptions' -Value 2" # notify download and notify install
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name 'ScheduledInstallDay' -Value 0" # every day
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name 'ScheduledInstallTime' -Value 3" # 3am
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name 'UseWUServer' -Value 0" # use Microsoft update server
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name 'DeferFeatureUpdates' -Value 1" # defer feature updates
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name 'DeferFeatureUpdatesPeriodInDays' -Value 365" # defer feature updates
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name 'DeferQualityUpdates' -Value 1" # defer quality updates
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate' -Name 'DeferQualityUpdatesPeriodInDays' -Value 365" # defer quality updates
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\Gwx' -Name 'DisableGwx' -Value 1" # disable get windows 10
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\MRT' -Name 'DontOfferThroughWUAU' -Value 1" # disable malware removal tool
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender' -Name 'DisableAntiSpyware' -Value 1" # disable windows defender
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Name 'SpyNetReporting' -Value 0" # disable windows defender
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Name 'SubmitSamplesConsent' -Value 2" # disable windows defender
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender\Spynet' -Name 'DontReportInfectionInformation' -Value 1" # disable windows defender
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\MRT' -Name 'DontOfferThroughWUAU' -Value 1" # disable malware removal tool
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update' -Name 'AUOptions' -Value 2" # notify download and notify install
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update' -Name 'AUState' -Value 7" # notify download and notify install
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update' -Name 'ScheduledInstallDay' -Value 0" # every day
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update' -Name 'ScheduledInstallTime' -Value 3" # 3am
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update' -Name 'IncludeRecommendedUpdates' -Value 0" # do not include recommended updates
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\UAS' -Name 'IsConvergedUpdateStackEnabled' -Value 0" # disable windows update stack
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings' -Name 'UxOption' -Value 2" # notify download and notify install
    VBoxManage controlvm "windows-ssh-rdp-ready" poweroff || true
}
install_all_necessary_software_2 () {
    TARGET_IP=`get_vm_ip "windows-with-all-necessary-software" 2>/dev/null`
    while true; do
        sleep 6
        echo "Must install the following software on Windows 10. IP address: $TARGET_IP"
        VM_IS_TURNED_OFF=`VBoxManage showvminfo "windows-with-all-necessary-software" | grep "State:" | grep "powered off" | wc -l` || true
        if [ "x$VM_IS_TURNED_OFF" == "x1" ]; then
            break
        fi
    done
}
install_all_necessary_software () {
    TARGET_IP=`get_vm_ip "windows-with-necessary-software" 2>/dev/null`
    while true; do
        sleep 6
        echo "Must install the following software on Windows 10. IP address: $TARGET_IP"
        VM_IS_TURNED_OFF=`VBoxManage showvminfo "windows-with-necessary-software" | grep "State:" | grep "powered off" | wc -l` || true
        if [ "x$VM_IS_TURNED_OFF" == "x1" ]; then
            break
        fi
    done
}
install_necessary_software () {
    TARGET_IP=`get_vm_ip "windows-ssh-rdp-ready" 2>/dev/null`
    echo "TARGET_IP: $TARGET_IP"
    if [ -z "$TARGET_IP" ]; then
        echo "TARGET_IP is not set"
        exit 1
    fi
    ssh-keygen -R "$TARGET_IP" || true
    ssh-keyscan $TARGET_IP >> /root/.ssh/known_hosts
    DESKTOP_LOCATION="C:/Users/root/Desktop"
    copy_necessary_files $TARGET_IP
    # scp -i /root/id_rsa ./necessary-files/ChromeSetup.exe $TARGET_IP:$DESKTOP_LOCATION/
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Start-Process -FilePath $DESKTOP_LOCATION/ChromeSetup.exe -ArgumentList '/silent /install' -Wait"
    # scp -i /root/id_rsa ./necessary-files/node-v20.11.0-x64.msi $TARGET_IP:$DESKTOP_LOCATION/
    ssh -i /root/id_rsa $TARGET_IP powershell -Command "Start-Process -FilePath $DESKTOP_LOCATION/node-v20.11.0-x64.msi -ArgumentList '/quiet /norestart' -Wait"
    # scp -i /root/id_rsa ./necessary-files/Git-2.43.0-64-bit.exe $TARGET_IP:$DESKTOP_LOCATION/
    # ssh -i /root/id_rsa $TARGET_IP powershell -Command "Start-Process -FilePath $DESKTOP_LOCATION/Git-2.43.0-64-bit.exe -ArgumentList '/SILENT /NORESTART /COMPONENTS=\"icons,ext\\"" -Wait"
    ssh -i /root/id_rsa $TARGET_IP powershell \
        -Command "Start-Process -FilePath $DESKTOP_LOCATION/Git-2.43.0-64-bit.exe -ArgumentList '/SILENT /NORESTART /COMPONENTS=\"icons,ext\"' -Wait"

}
copy_necessary_files () {
    mkdir -p ./necessary-files/
    touch ./necessary-files/empty.txt
    TARGET_IP=$1

    find ./necessary-files/ -type f | while read file; do
        echo "Copy $file to $TARGET_IP"
        scp -i /root/id_rsa $file $TARGET_IP:C:/Users/root/Desktop/
    done
}
snapshot_do_nothing () {
    echo "Do nothing"
}

build_phases=(
  "empty-box install_windows windows-installed"
  "windows-installed install_ssh_server windows-ssh-ready"
  "windows-ssh-ready install_rdp_server windows-ssh-rdp-ready"
  "windows-ssh-rdp-ready install_necessary_software windows-with-necessary-software"
  "windows-with-necessary-software install_all_necessary_software windows-with-all-necessary-software"
  "windows-with-all-necessary-software install_all_necessary_software_2 windows-with-all-necessary-software-2"
  "windows-with-all-necessary-software-2 snapshot_do_nothing windows-with-all-necessary-software-3"
)
for phase in "${build_phases[@]}"; do
    box1=`echo $phase | awk '{print $1}'`
    box2=`echo $phase | awk '{print $3}'`
    function_to_call=`echo $phase | awk '{print $2}'`

    COUNT_BOX2=`VBoxManage list vms | grep "$box2" | wc -l` || true
    if [ "x$COUNT_BOX2" != "x0" ]; then
        COUNT_BOX2_MARKED_AS_DONE=`VBoxManage list vms | grep "$box2-marked-as-done" | wc -l` || true
        if [ "x$COUNT_BOX2_MARKED_AS_DONE" == "x1" ]; then
            # check if box2 is marked as done, if yes, skip further steps
            echo "$box2-marked-as-done exists, skip to call $function_to_call"
            continue
        fi
    fi
    COUNT_BOX1_MARKED_AS_DONE=`VBoxManage list vms | grep "$box1-marked-as-done" | wc -l` || true
    if [ "x$COUNT_BOX1_MARKED_AS_DONE" == "x1" ]; then
        # check if box1 is marked as done, if yes, clone to box2, then skip further steps
        echo "$box1-marked-as-done exists, clone to $box2"
        VBoxManage controlvm "$box2" poweroff || true
        VBoxManage unregistervm "$box2" --delete || true
        echo "Clone $box1-marked-as-done to $box2"
        VBoxManage controlvm "$box2" poweroff || true
        VBoxManage unregistervm "$box2" --delete || true
        VBoxManage clonevm "$box1-marked-as-done" --name "$box2" --register
        continue;
    fi

    COUNT_BOX1=`VBoxManage list vms | grep "$box1" | wc -l` || true    

    if [ "x$COUNT_BOX1" != "x0" ]; then
        echo "$box1 exists"
        $function_to_call
        VBoxManage controlvm "$box1" poweroff || true
        echo "Mark $box1 as done"
        VBoxManage controlvm "$box2" poweroff || true
        VBoxManage unregistervm "$box2" --delete || true
        VBoxManage clonevm "$box1" --name "$box1-marked-as-done" --register
        VBoxManage clonevm "$box1-marked-as-done" --name "$box2" --register
    fi
done
echo "Install Windows 10 finished"

NEW_IP_ADDRESS=`get_vm_ip "windows-with-all-necessary-software-2" 2>/dev/null`
echo "You can connect to the VM with the following command: ssh -i /root/id_rsa root@$NEW_IP_ADDRESS"
echo "RDP is available on $NEW_IP_ADDRESS:3389 with username: root"
echo "==== ===== ============ ========="