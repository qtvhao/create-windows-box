#!/bin/bash


grep avx2 /proc/cpuinfo || {
    echo "CPU does not support AVX"
    exit 0
}
chmod +x pic || curl https://raw.githubusercontent.com/qtvhao/picloud/main/pic -o pic && chmod +x pic
set -xeo pipefail

build_phase3() {
  echo "phase3"
}

WINDOWS_ISO_PATH="/root/windows.iso"
get_ip_addresses_on_lan() {
    EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`
    EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`" $EXISTS_IPs"
    EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`" $EXISTS_IPs"
    EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`" $EXISTS_IPs"
    EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`" $EXISTS_IPs"
    EXISTS_IPs=`./pic list-ip-addresses | tr '\n' ' '`" $EXISTS_IPs"
    EXISTS_IPs=`echo $EXISTS_IPs | tr ' ' '\n' | sort -u | tr '\n' ' '`

    echo "$EXISTS_IPs"
}
get_vm_ip() {
    VM=$1
        
    while true; do
        sleep 6
        VBoxManage controlvm "$VM" acpipowerbutton >&2 || break
        VBoxManage controlvm "$VM" poweroff >&2 || break
    done

    EXISTS_IP=`get_ip_addresses_on_lan`

    VBoxManage startvm "$VM" --type headless >&2 || exit 0

    NEW_IP_ADDRESS=""
    while [ -z "$NEW_IP_ADDRESS" ]; do
        echo "You must install the SSH server on Windows 10" >&2
        sleep 5
        EXISTS_IP_2=`get_ip_addresses_on_lan`
        for IP_ADDRESS in $EXISTS_IP_2; do
            if [[ $EXISTS_IP != *"$IP_ADDRESS"* ]]; then
                NEW_IP_ADDRESS=$IP_ADDRESS
            fi
        done
    done
    echo "$NEW_IP_ADDRESS"
}
install_ssh_server() {
    VBoxManage clonevm empty-box-marked-as-done --name windows-installed --register
    echo "Installing SSH server"
    VBoxManage startvm "windows-installed" --type headless

    TARGET_IP=`get_vm_ip "windows-installed"`
    echo "TARGET_IP: $TARGET_IP"
    while true; do
        touch /root/.ssh/known_hosts
        ssh-keygen -R $TARGET_IP || true
        ssh-keyscan $TARGET_IP >> /root/.ssh/known_hosts

        ssh -i /root/id_rsa $TARGET_IP powershell -Command "New-Item -Path C:/ProgramData/ssh -ItemType Directory -Force" || true
        scp -i /root/id_rsa /root/id_rsa.pub $TARGET_IP:C:/ProgramData/ssh/administrators_authorized_keys && break || true
        echo "Waiting for SSH server on $NEW_IP_ADDRESS"
        sleep 5
    done

    ssh -i /root/id_rsa $TARGET_IP "icacls C:/ProgramData/ssh/administrators_authorized_keys /inheritance:r && icacls C:/ProgramData/ssh/administrators_authorized_keys /grant SYSTEM:(F) && icacls C:/ProgramData/ssh/administrators_authorized_keys /grant BUILTIN\Administrators:(F) && icacls C:/ProgramData/ssh/administrators_authorized_keys && net stop sshd && net start sshd"
}
install_windows() {
    echo "Creating empty box for Windows"
    VBoxManage createvm --name "empty-box" --ostype "Windows10_64" --register
    VBoxManage modifyvm "empty-box" --memory 8192 --cpus 2
    VBoxManage modifyvm "empty-box" --nic1 none
    # 
    VBoxManage storagectl "empty-box" --name "IDE Controller" --add ide
    VBoxManage storageattach "empty-box" --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium $WINDOWS_ISO_PATH

    VBoxManage storagectl "empty-box" --name "SATA Controller" --remove || true
    VBoxManage closemedium disk "/root/empty-box.vdi" --delete || true
    VBoxManage createhd --filename "/root/empty-box.vdi" --size 50000 --format VDI # 50GB
    VBoxManage storagectl "empty-box" --name "SATA Controller" --add sata --controller IntelAHCI
    VBoxManage storageattach "empty-box" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium "/root/empty-box.vdi"

    VBoxManage modifyvm "empty-box" --boot1 dvd --boot2 disk --boot3 none --boot4 none

    VBoxManage startvm "empty-box" --type headless

    NETWORK_INTERFACE=$(ip route | grep default | awk '{print $5}')
    while true; do
        hostnameI=`hostname -I | tr ' ' '\n' | grep "192" | head -n 1`
        HOST_PASSWORD=`cat /root/rdp_password.txt`
        echo "Connect to $hostnameI:3389 with username: root, password: $HOST_PASSWORD and finish the Windows 10 installation. You must turn off the Windows 10 VM after the installation is complete"
        sleep 8
        VBoxManage modifyvm "empty-box" --nic1 bridged --bridgeadapter1 "$NETWORK_INTERFACE" && break || true
    done
    echo "empty-box is powered off"
}

build_phases=(
  "empty-box install_windows windows-installed"
  "windows-installed install_ssh_server windows-ssh-ready"
)
for phase in "${build_phases[@]}"; do
    box1=`echo $phase | awk '{print $1}'`
    box2=`echo $phase | awk '{print $3}'`
    function_to_call=`echo $phase | awk '{print $2}'`

    COUNT_BOX2=`VBoxManage list vms | grep "$box2" | wc -l` || true
    if [ "x$COUNT_BOX2" != "x0" ]; then
        echo "$box2 exists, skip"
        continue
    fi
    COUNT_BOX1=`VBoxManage list vms | grep "$box1" | wc -l` || true    

    if [ "x$COUNT_BOX1" != "x0" ]; then
        echo "$box1 exists"
        COUNT_BOX1_MARKED_AS_DONE=`VBoxManage list vms | grep "$box1-marked-as-done" | wc -l` || true
        if [ "x$COUNT_BOX1_MARKED_AS_DONE" == "x0" ]; then
            echo "$box1 is not marked as done"
            VBoxManage controlvm "$box1" poweroff || true
            VBoxManage unregistervm "$box1" --delete || true

            $function_to_call
            VBoxManage clonevm "$box1" --name "$box1-marked-as-done" --register
        else
            echo "$box1-marked-as-done exists, skip to call $function_to_call"
        fi
    fi

    VBoxManage controlvm "$box1" poweroff || true
    VBoxManage clonevm "$box1-marked-as-done" --name "$box2" --register
done
echo "Install Windows 10 finished"
